<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ting0220.github.io</id>
    <title>学习&amp;记录</title>
    <updated>2019-07-24T03:28:37.461Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ting0220.github.io"/>
    <link rel="self" href="https://ting0220.github.io/atom.xml"/>
    <logo>https://ting0220.github.io/images/avatar.png</logo>
    <icon>https://ting0220.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 学习&amp;记录</rights>
    <entry>
        <title type="html"><![CDATA[Thread]]></title>
        <id>https://ting0220.github.io/post/thread</id>
        <link href="https://ting0220.github.io/post/thread">
        </link>
        <updated>2019-07-24T03:25:57.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">Thread thread=new Thread(){
  @Override
  public void run(){
    for(int i=0;i&lt;1_000_000;i++){
      if(Thread.interrupted()){
        //收尾
        return;
      }
      try{
        Thread.sleep(2000);
      }catch(InterruptedExcepted e){
        e.printStackTrace();
        //收尾
        return;
      }
      System.out.println(&quot;number:&quot;+i);
    }
  }
};
thread.start();
try{
   Thread.sleep(500);
}catch(InterruptedException e){
  e.printStackTrace();
}
thread.interrupt();
</code></pre>
<p><strong>为什么thread.sleep()需要用try-catch包起来？</strong></p>
<p>因为要考虑到被打断的情况。如上边的例子，在外边程序要睡500ms，然后同时里边程序要睡2000ms，这样就会出现外边的程序刚睡了500ms就要打断里边的程序，但是里边的程序正在睡，所以会叫醒里边的程序，然后这个时候里边的睡眠就需要处理这种异常的情况，也就是需要在catch中处理这些情况。</p>
<p>如果不进行收尾和return ，程序这个时候会吞掉interrupt的情况（即抛出异常之后，将interrupt设置为false），然后继续执行这个程序。</p>
<p>如果不想支持外部打断的话，可以使用SystemClock.sleep(2000)这个方法，这里会把外部打断的异常吞掉。当然也可以使用Thread.sleep()方法，但是不处理这个异常。</p>
<h5 id="wait">wait()</h5>
<pre><code class="language-java">private synchronized void printString(){
  while(sharedString==null){
    try{
      wait()
    }catch(InterruptedException e){
      e.printStackTrace();
    }
  }
    System.out.print(&quot;sharedString&quot;+sharedString);
}

private synchronized void initString(){
  sharedString=&quot;rengwuxian&quot;;
  notifyAll();
}
</code></pre>
<p>因为我们不知道什么时候sharedString会被赋值，所以我们的打印方法中会调用wait()方法，这样的话，如果是打印的方法先执行，那么如果是null的话，就会释放monitor，不会一直占用资源，这样后边的线程才可以对sharedString进行初始化。</p>
<p><strong>那么为什么打印方法那里要用while而不是if呢？</strong></p>
<p>因为不仅仅是notifyAllI()会把程序唤醒，如果是异常情况也会唤醒我们的等待，这个时候如果是if的话，还是可能会是null的情况，所以我们使用while。</p>
<p><strong>为什么会使用notifyAll而不是使用notify呢</strong></p>
<p>因为我们不确定有几个线程处于等待线程里，如果是notify的话，只能唤醒等待线程队列中的一个，其余的没有办法唤醒，所以这里使用notifyAll</p>
<p><strong>被notifyAll唤醒之后会在哪里继续执行呢？</strong></p>
<p>会在wait的后边，不会出去while方法，当执行结束while方法后，会去重新判断while的条件，如果不满足才会跳出去执行其余方法</p>
<ul>
<li>wait()和notifyAll()是Object的方法</li>
<li>wait()和notifyAll()是需要包含在synchronized代码块中，因为是等待资源和释放资源，如果不是在synchronized代码块中，是没有意义的</li>
</ul>
<p>**Thread.join()**在一个线程中加入另一个线程，让另一个线程先执行，执行完毕之后再执行这个线程</p>
<p>**Thread.yield()**让自己进入到wait()状态，把时间让给同优先级正在等待的线程，具体是排在所有同优先级等待线程的最后边还是排在同优先级仅一个等待线程的后边要根据具体的操作系统来说，不同的操作系统不一样。</p>
<h4 id="android的handler机制">Android的Handler机制</h4>
<p>在Java中当所有的线程结束了，进程才会结束。</p>
<p>一个Looper会有一个MessageQueue</p>
<p>Handler面向的是创建它的线程，即创建的时候（new Handler()没有添加参数）的情况下，在哪个线程创建，最后会在哪个线程执行。但是如果添加了参数，例如即使是在子线程中Handler handler=new Handler(Looper.getMainLooper())，那么它面向的也是主线程。</p>
<h4 id="threadlocal">ThreadLocal</h4>
<p>不是一个线程，而是针对一个线程的本地的变量。类似于一个Map，key是每一个线程，value是每一个线程的本地资源。</p>
<h4 id="asynctask-内存泄漏">AsyncTask 内存泄漏？</h4>
<p>AsyncTask会有外部对象的引用，因为在java中，内部对象都会有外部对象的一个引用。一旦别的地方有自己的引用，自己就没有办法释放。</p>
<ul>
<li>GC Root
<ul>
<li>运行中的线程（AsyncTask在运行的过程中，Activity关闭了，这个时候因为AsyncTask有外部Activity的引用，所以此时Activity不会被回收，导致内存泄漏）</li>
<li>静态对象，即所有的static不会被回收，static持有的引用也不会被回收。</li>
<li>本地代码的引用</li>
</ul>
</li>
<li>所以AsyncTask引起内存泄漏，不是因为它是内部类，只是因为它内部有运行中的线程，所以会导致内存泄漏</li>
</ul>
<p>AsyncTask：小任务</p>
<p>Excutors：（能用就用）已经添加进来的线程，即使没有执行也取消不掉。</p>
<p>handlerThread：后台执行的单线程（Executors.newSingleThreadExecutor()）</p>
<p>service&amp;&amp;IntentService</p>
<p>是一个后台线程的活动空间。</p>
<p>IntentService是一个service，但是执行一次就会被关闭</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[事件分发机制]]></title>
        <id>https://ting0220.github.io/post/handle</id>
        <link href="https://ting0220.github.io/post/handle">
        </link>
        <updated>2019-06-30T13:56:28.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p><strong>Activity对点击事件的分发过程</strong></p>
<pre><code class="language-java">public boolean dispatchTouchEvent(MotionEvent ev){
    if(ev.getAction()==MotionEvent.ACTION_DOWN){
        onUserInteraction();
    }
    if(getWindow().superDispatchTouchEvent(ev)){
        return true;
    }
    return onTouchEvent(ev);
}
</code></pre>
<p>![image-20180925143718326](/Users/zhaoting/Desktop/Activity motionEvent.png)</p>
</li>
<li>
<p><strong>Window将事件传递给ViewGroup</strong></p>
<p>上边提到事件从Activity传递到了Window，但是Window是一个抽象类，Window.superDispatchTouchEvent方法也是抽象方法，我们只有找到Window的实现类才可以，实现类发现只有PhoneWindow，然后查看PhoneWindow的源码可以发现</p>
<pre><code class="language-java">public boolean superDispatchTouchEvent(MotionEvent event){
    return mDecor.superDispatchTouchEvent(event);
}
</code></pre>
<p>可以发现在这里，PhoneWindow直接将事件传递给了DecorView，而这个DecorView就是我们在setContentView设置的View的父View。</p>
<p>由于DecorView extends FrameLayout，所以到这里我们就把事件传递给了ViewGroup。</p>
</li>
<li>
<p><strong>ViewGroup对点击事件的分发过程</strong></p>
<pre><code class="language-java">final boolean intercepted;
if(actionMasked==MotionEvent.ACTION_DOWN||mFirstTouchTarget!=null){
    final boolean disallowIntercept=(mGroupFlags&amp;FLAG_DISALLOW_INTERCEPT)!=0;
    if(!disallowIntercept){
        intercepted=onInterceptTouchEvent(ev);
        ev.setAction(sction);
    }else{
        intercepted=false;
    }
}else{
    intercepted=true;
}
</code></pre>
<p>可以看出，ViewGroup会在两种情况下判断是否要拦截当前事件：<strong>事件类型为ACTION_DOWN</strong>或者<strong>mFirstTouchTarget!=null</strong>。其中的mFirstTouchTarget表示的是，当一个点击动作发生时，ACTION_DOWN事件被ViewGroup的子元素成功处理时，<strong>mFirstTouchTarget可以记录是否是子元素消费了一个点击动作当中的ACTION_DOWN事件</strong>，当ACTION_DOWN事件被ViewGroup拦截时，mFirstTouchTarget就为null，那么当这个点击动作事件序列的ACTION_MOVE和ACTION_UP事件到来时（actionMasked==MotionEvent.ACTION_DOWN||mfirstTouchtarget!=null）这个条件就为false，这将使ViewGroup不用调用onInterceptTouchEvent()就直接将事件拦截交给自身处理。</p>
<p>当然，这里有一种特殊情况，那就是FLAG_DISALLOW_INTERCEPT标记位，这个标记位是通过requestDisallowInterceptTouchEvent方法来设置的，一般用于子View中。</p>
<p><strong>Q：requestDisallowInterceptTouchEvent()方法可以拦截父容器的ACTION_DOWN事件么？</strong></p>
<p>A：不可以，这是因为ViewGroup在分发事件时，如果是ACTION_DOWN就会重置FLAG_DISALLOW_INTERCEPT这个标记位（resetTouchState()方法中），将导致子View中设置的这个标记位无效。因此，当面对ACTION_DOWN事件时，ViewGroup总是会调用自己的onInterceptTouchEvent方法来询问自己是否要拦截事件。</p>
<p><strong>ViewGroup不拦截事件的时候，事件向下分发交由它的子View进行处理</strong></p>
<pre><code class="language-java">final View[] children=mChildren;
for(int i=childrenCount-1;i&gt;=0;i--){
    final int childIndex=customOrder?getChildDrawingOrder(childrenCount,i):i;
    final View child=(preorderedList==null)?children(childIndex):preorderedList.get(childIndex);
    if(!canViewReceivePointerEvents(child)||!isTransformedTouchPointInView(x,y,child,null)){
        continue;
    }
    newTouchTarget=getTouchTarget(child);
    if(newTouchTarget!=null){
        //Child is already receiving touch withhin its bounds.
        //Give it the new pointer in addition to the ones it is handling.
        newTouchTarget.pointerIdBits|=idBitsToAssign;
        break;
    }
    
    resetCancelNextUpFlag(child);
    if(dispatchTransformedTouchEvent(ev,false,child,idBitsToAssign)){
        //Child wants to receive touch within its bounds.
        mLastTouchDownTime=ev.getDownTime();
        if(preorderedList!=null){
            //childIndex points into presorted list,find original index
            for(int j=0;j&lt;childrenCount;j++){
                if(children[childIndex]==mChildren[j]){
                    mLastTouchDownIndex=j;
                    break;
                }
            }
        }else{
            mLastTouchDownIndex=childIndex;
        }
        mLastTouchDownX=ev.getX();
        mLastTouchDownY=ev.getY();
        newTouchTarget=addTouchTarget(child,idBitsToAssign);
        alreadyDispatchedToNewTouchTarget=true;
        break;
    }
    
}
</code></pre>
<p>上面这段代码逻辑也很清晰，首先遍历ViewGroup的所有子元素，然后判断子元素是否能够接收到点击事件。是否能够接收点击事件主要由两点来衡量：子元素是否在播动画喝点击事件的坐标是否落在子元素的区域内。如果某个子元素满足这两个条件，那么事件就会传递给它来处理。可以看到，dispatchTransformedTouchEvent实际上调用的就是子元素的dispatchTouchEvent方法，在它的内部有如下一段内容，而在上面的代码中child传递的不是null，因此它会直接调用子元素的dispatchTouchEvent方法，这样事件就交由子元素处理了，从而完成了一轮事件分发。</p>
<pre><code class="language-java">if(child==null){
    handled=super.dispatchTouchEvent();
}else{
    handled=child.dispatchTouchEvent(event);
}
</code></pre>
<p>如果子元素的dispatchTouchEvent返回true，那么mFirstTouchTarget就会被赋值同时跳出for循环。如果子元素的dispatchTouchEvent返回false，ViewGroup就后悔把事件分发给下一个子元素（如果还有下一个子元素的话）。</p>
<pre><code class="language-java">private TouchTarget addTouchTarget(View child,int pointerIdBits){
    TouchTarget target=TouchTaget.obtain(child,pointerIdBits);
    target.next=mFirstTouchTarget;
    mFirstTouchTarget=target;
    return target;
}
</code></pre>
<p>其实mFirstTouchTarget真正赋值过程是在addTouchTarget内部完成的，从下面的addTouchTarget方法的内部结构可以看出，mFirstTarget其实是一种单链表结构。mFirstTouchtarget是否被赋值，将直接影响到ViewGroup对事件的拦截策略，如果mfirstTouchtarget为null,那么ViewGroup就默认拦截接下来同一序列中所有的点击事件。</p>
<p>如果遍历所有的子元素后事件都没有被合适地处理，这包含两种情况：第一种是ViewGroup没有子元素；第二种是子元素处理了点击事件，但是在dispatchTouchEvent中返回了false，这一般是因为子元素在onTouchEvent中返回了false。在这两种情况下，ViewGroup会自己处理点击事件，代码如下：</p>
<pre><code class="language-java">//Dispatch to touch targets
if(mFirstTouchTarget==null){
    //No touch targets so treat this an ordinary view.
    handled=dispatchTransformedTouchEvent(ev,canceld,null,TouchTarget.ALL_POINTER_IDS);
}
</code></pre>
<p>注意上面这段代码，这里第三个参数child为null，从前面的分析可以知道，它会调用super.dispatchTouchEvent(event)，很显然，这里就转到了View的dispatchTouchEvent方法，即点击事件开始交由View来处理。</p>
</li>
<li>
<p><strong>View对点击事件的处理过程</strong></p>
<pre><code class="language-java">public boolean dispatchTouchEvent(MotionEvent event){
    boolean result=false;
    ...
        if(onFilterTouchEventForSecurity(event)){
            //noinspection SimplifiableIfSytatement
            ListenerInfo li=mListenerInfo;
            if(li!=null&amp;&amp;li.mOnTouchListener!=null&amp;&amp;(mViewFlags&amp;ENABLED_MASK)==ENABLED&amp;&amp;li.mOnTouchListener.onTouch(thhis,event)){
                result=true;
            }
            if(!result&amp;&amp;onTouchEvent(event)){
                result=true;
            }
        }
    ...
    return result;
}
</code></pre>
<p>从上面的源码可以看出View对点击事件的处理过程，首先会判断有没有设置onTouchListener，如果onTouchListener中的onTouch方法返回true，那么onTouchEvent就不会被调用，可见onTouchListener的优先级高于onTouchEvent。</p>
<pre><code class="language-java">if((viewFlags&amp;ENABLED_MASK)==DISABLED){
    if(event.getAction()==MotionEvent.ACTION_UP&amp;&amp;(mPrivateFlags&amp;PFLAG_PRESSED)!=0){
        setPressed(false);
    }
    //A disabled view that is clickable still consumes the touch
    //events,ite just doesn't respond to them.
    return (((viewFlags&amp;CLICKABLE)==CLICKABLE||(viewFlags&amp;LONG_CLICKABLE)==LONG_CLICKABLE));
}
</code></pre>
<p>上面代码说明当View处于不可用状态时，也会消耗点击事件，尽管它看起来不可用。</p>
<pre><code class="language-java">if(mTouchDelegate！=null){
    if(mTouchDelegate.onTouchEvent(event)){
        return true;
    }
}
</code></pre>
<p>如果View设置有代理，那么还会执行TouchDelegate的onTouchEvent方法，这个onTouchEvent的工作机制看起来和onTouchListener类似。</p>
<p>然后再看一下onTouchEvent中对点击事件的具体处理</p>
<pre><code class="language-java">if((viewFlags&amp;CLICKABLE)==CLICKABLE||(viewFlags&amp;LONG_CLICKABLE)==LONG_CLICKABLE){
    switch(event.getAction()){
        case MotionEvent.ACTION_UP:
            boolean prepressed=(mPrivateFlags&amp;PFLAG_PREPRESSED)!=0;
            if((mPrivateFlags&amp;PFLAG_PRESSED)!=0||prepressed){
                ...
                    if(!mHasPerformedLongPress){
                        //This is a tap,so remove the longpress check
                        removeLongPressCallback();
                        //Only perform take click actions if we were in the pressed state
                        if(!focusTaken){
                            //Use a Runnable and post this rather than calling 
                            //performClick directly.This lets other visual state
                            //of the view update before click actions start.
                            if(mPerformClick==null){
                                mPerformClick=new PerformClick();
                            }
                            if(!post(mPerformClick)){
                                performClick();
                            }
                        }
                    }
                	...
            }
            break;
        }
        ...
        return true;
}
</code></pre>
<p>从上面的代码来看，只要View的CLICKABLE和LONG_CLICKABLE有一个为true，那么它就会消耗这个事件，即onTouchevent方法返回true，不管它是不是DISABLE状态。然后就是当ACTION_UP事件发生时，会触发performClick方法，如果View设置了onClickListener，那么performClick方法内部会调用它的onClick方法，如下所示：</p>
<pre><code class="language-java">public boolean performClick(){
    final boolean result;
    final ListenerInfo li=mListenerInfo;
    if(li!=null&amp;&amp;li.mOnClickListener!=null){
        playSoundEffect(SoundEffectConstants.CLICK);
        li.mOnClickListener.onClick(this);
        result=true;
    }else{
     	result=false;   
    }
    sendAccessibilityEvent(AccessibilityEveent.TYPE_VIEW_CLICKED);
    return result;
}
</code></pre>
</li>
</ol>
<h5 id="事件传递机制结论">事件传递机制结论</h5>
<ol>
<li>同一个事件序列是从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</li>
<li>正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。</li>
<li>某个View，一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。这条也很好理解，就是说当一个View决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它来处理，因此就不用仔调用这个View的onInterceptTouchEvent去询问它是否要拦截了。</li>
<li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交给它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给了一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了。</li>
<li>如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。</li>
<li>ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouchEvent方法默认返回false。</li>
<li>View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。</li>
<li>View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。</li>
<li>View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。</li>
<li>onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。</li>
<li>事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisabllowInterceptedTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</li>
</ol>
]]></content>
    </entry>
</feed>